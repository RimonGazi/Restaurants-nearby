buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.0'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

ext {
    minSdk = 15
    compileSdk = 28

    // UI
    appcompatVersion = '1.1.0-alpha01'
    APPCOMPAT = "androidx.appcompat:appcompat:$appcompatVersion"
    materialVersion = '1.1.0-alpha02'
    MATERIAL = "com.google.android.material:material:$materialVersion"
    constraintLayoutVersion = '2.0.0-alpha3'
    CONSTRAINT_LAYOUT = "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    CALLIGRAPHY = 'uk.co.chrisjenx:calligraphy:2.2.0'

    // map
    mapVersion = '16.1.0'
    MAP = "com.google.android.gms:play-services-maps:$mapVersion"

    //Architecture Components
    lifecycleVersion = '2.0.0-beta01'
    LIFECYCLE_EXTENSION = "android.arch.lifecycle:extensions:$lifecycleVersion"

    truthVersion = '0.40'
    TRUTH = "com.google.truth:truth:$truthVersion"

    // RX
    RX_ANDROID = 'io.reactivex.rxjava2:rxandroid:2.1.0'
    RX_JAVA = 'io.reactivex.rxjava2:rxjava:2.2.1'

    // Retrofit
    retrofitVersion = '2.4.0'
    RETROFIT = "com.squareup.retrofit2:retrofit:$retrofitVersion"
    RETROFIT_MOSHI_CONVERTER = "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    RETROFIT_RX_ADPTER = "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"

    // Stetho
    STETHO = 'com.facebook.stetho:stetho:1.5.0'
    STETHO_OK_HTTP = 'com.facebook.stetho:stetho-okhttp3:1.5.0'

    // Timber
    TIMBER = 'com.jakewharton.timber:timber:4.7.1'

    // Dagger
    daggerVersion = '2.17'
    DEPENDENCY_INJECTION = [
            dagger             : "com.google.dagger:dagger:${daggerVersion}",
            annotationProcessor: "com.google.dagger:dagger-compiler:${daggerVersion}",
    ]

    // Glide
    glideVersion = "4.8.0"
    GLIDE = [
            glide              : "com.github.bumptech.glide:glide:$glideVersion",
            annotationProcessor: "com.github.bumptech.glide:compiler:$glideVersion"
    ]

    // Leak Canary
    leakCanaryVersion = '1.6.1'
    LEAK_CANNARY_DEBUG = "com.squareup.leakcanary:leakcanary-android:${leakCanaryVersion}"
    LEAK_CANNARY_RELEASE = "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"
    LEAK_CANNARY = [
            debug  : LEAK_CANNARY_DEBUG,
            release: LEAK_CANNARY_RELEASE
    ]

    // Instrumentation tests
    espressoVersion = '3.1.0-alpha1'
    ESPRESSO_CORE = "androidx.test.espresso:espresso-core:$espressoVersion"
    ESPRESSO_CONTRIB = "androidx.test.espresso:espresso-contrib:$espressoVersion"
    runnerVersion = '1.1.0-alpha1'
    RUNNER = "androidx.test:runner:$runnerVersion"
    rulesVersion = '1.1.0-alpha1'
    TEST_RULE = "androidx.test:rules:$rulesVersion"

    INSTRUMENT_TESTS = [
            expresspCore   : ESPRESSO_CORE,
            expresspContrib: ESPRESSO_CONTRIB,
            runner         : RUNNER,
            RULE           : TEST_RULE
    ]

    // Local unit tests
    junitVersion = '4.12'
    JUNIT = "junit:junit:${junitVersion}"
    mockitoVersion = "2.8.9"
    MOCKITO = "org.mockito:mockito-core:$mockitoVersion"
    hamcrestVersion = '1.3'
    HAMCREST = "org.hamcrest:hamcrest-library:$hamcrestVersion"
    UNIT_TEST = [
            junit   : JUNIT,
            mockito : MOCKITO,
            hamcrest: HAMCREST,
    ]

    /*add all dependencies to this array*/
    PROJECT_DEPENDENCIES = [
            APPCOMPAT,
            MATERIAL,
            CONSTRAINT_LAYOUT,
            MAP,
            CALLIGRAPHY,
            LIFECYCLE_EXTENSION,
            RX_ANDROID,
            RX_JAVA,
            RETROFIT,
            RETROFIT_MOSHI_CONVERTER,
            RETROFIT_RX_ADPTER,
            STETHO,
            STETHO_OK_HTTP,
            TIMBER
    ]
}

final String APP_PLUGIN = 'com.android.application'

subprojects {
    apply plugin: APP_PLUGIN
    apply from: '../config/quality.gradle'

    dependencies {
        api PROJECT_DEPENDENCIES
        compileOnly TRUTH
        api DEPENDENCY_INJECTION.dagger
        api GLIDE.glide

        debugApi LEAK_CANNARY.debug
        releaseApi LEAK_CANNARY.release

        androidTestImplementation INSTRUMENT_TESTS.expresspCore
        androidTestImplementation INSTRUMENT_TESTS.expresspContrib
        androidTestImplementation INSTRUMENT_TESTS.runner
        androidTestImplementation INSTRUMENT_TESTS.RULE

        testImplementation UNIT_TEST.junit
        testImplementation UNIT_TEST.mockito
        testImplementation UNIT_TEST.hamcrest

        annotationProcessor DEPENDENCY_INJECTION.annotationProcessor
        annotationProcessor GLIDE.annotationProcessor
        implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    }

    def keystorePropertiesFile = rootProject.file("keystore.properties")
    def keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    android {
        compileSdkVersion compileSdk

        android {
            dataBinding {
                enabled = true
            }
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        dataBinding {
            enabled = true
        }

        signingConfigs {
            release {
                try {
                    keyAlias keystoreProperties['keyAlias']
                    keyPassword keystoreProperties['keyPassword']
                    storeFile file(keystoreProperties['storeFile'])
                    storePassword keystoreProperties['storePassword']
                }
                catch (ex) {
                    throw new IOException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties. " + ex.toString())
                }
            }
        }

        defaultConfig {
            minSdkVersion minSdk
            targetSdkVersion compileSdk
            multiDexEnabled true
            versionCode 1
            versionName "1.0"
            applicationId "com.rimon.restaurantsnearby"
            vectorDrawables.useSupportLibrary = true

            buildTypes {
                debug {
                    applicationIdSuffix '.debug'
                    versionNameSuffix '-DEBUG'
                    minifyEnabled false
                    useProguard false
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                }

                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                    signingConfig signingConfigs.release
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
